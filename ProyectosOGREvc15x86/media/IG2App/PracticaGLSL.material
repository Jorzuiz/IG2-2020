// archivo PracticaGLSL.material

vertex_program Ejemplo2VS glsl //nombre para el shader
{
	source Ejemplo2VS.glsl // nombre del archivo del código
	default_params // valores para las variable uniform
	{
		param_named_auto modelViewProjMat worldviewproj_matrix
	}
}

// -> // archivo PracticaGLSL.material
fragment_program Ejemplo2FS glsl //nombre para el shader
{
	source Ejemplo2FS.glsl // nombre del archivo del código
	default_params // valores para las variable uniform
	{
		param_named texturaL int 0 // 1º unidad de textura ‐> *
		param_named texturaM int 1 // 2º unidad de textura ‐> *
		param_named BF float 0.5
		param_named intLuzAmb float 1.0
	}
}

material IG2/ejemplo2GLSL {
	technique {
		pass {
			vertex_program_ref Ejemplo2VS
			{ // params ‐> default_params
			}
			fragment_program_ref Ejemplo2FS
			{ // params ‐> default_params
			}
			texture_unit { // * ‐> int 0
				texture ejemploA.jpg 2d // archivo
				tex_address_mode clamp // sólo configuración
				filtering bilinear // de acceso al texel
			}
				texture_unit { // * ‐> int 1
				texture ejemploB.jpg 2d // archivo
				tex_address_mode wrap // sólo configuración
			} // de acceso al texel
		} 
	} 
}

// Shader de Rasterizado
vertex_program SpaceVS glsl
{
	source SpaceVS.glsl
	default_params 			// Valores para las variables uniform
	{
		param_named_auto modelViewProjMat worldviewproj_matrix	
		param_named ZF float 0.5
		param_named_auto SinTiempo sintime_0_2pi 32
	}
}

// Shader de Fusion
fragment_program SpaceFS glsl
{
	source SpaceFS.glsl 
	default_params 			// Valores para las variable uniform
	{
		param_named texturaL int 0 // 1º unidad de textura -> *
		param_named texturaM int 1 // 2º unidad de textura -> *
		param_named BF float 0.5
		
		//param_named intLuzAmb float 1.0
		
	}
}

material IG2App/SpaceGLSL {
	technique {
		pass {
			vertex_program_ref SpaceVS
			{ // params -> default_params
			}
			fragment_program_ref SpaceFS
			{ // params -> default_params
			}
			// Almacenes de texturas en punteros
			texture_unit { 					// * -> int 0
				texture lightMap.jpg 2d 	// archivo
				tex_address_mode clamp 		// sólo configuración
				filtering bilinear 			// de acceso al texel
			}
				texture_unit { 				// * ‐> int 1
				texture spaceSky.jpg 2d 		// archivo
				tex_address_mode wrap 		// sólo configuración
			} 								// de acceso al texel
		} 
	} 
}

////////////////////////////////////////////////////////////////////

vertex_program CorrosionVS glsl
{
	source CorrosionVS.glsl
	default_params 			
	{
		param_named_auto modelViewProjMat worldviewproj_matrix	
		param_named_auto vMatrix inverse_transpose_world_matrix
	}
}

fragment_program CorrosionFS glsl
{
	source CorrosionFS.glsl 
	default_params 			
	{
		param_named_auto Flipping render_target_flipping // -1 o 1

		param_named texturaCorrosion int 0
		param_named texturaBumpy int 1
		param_named  InColor float4 0.5 0.5 0.5 1	// Color del interior
		param_named OutColor float4 0.0 0.5 0.0 1 	// Color del exterior
	}
}

material IG2App/CorrosionGLSL {
	technique {
		pass {
			// Activa o desactiva la vision por el anverso
			cull_hardware none
			cull_software none
			
			vertex_program_ref CorrosionVS
			{ // params -> default_params
			}
			fragment_program_ref CorrosionFS
			{ // params -> default_params
			}

			texture_unit { 					// * -> int 0
				texture corrosion.jpg 2d 	
				tex_address_mode clamp 		// sólo configuración
				filtering bilinear 			// de acceso al texel
			}
			texture_unit { 					// * -> int 1
				texture BumpyMetal.jpg 2d 	
				tex_address_mode wrap 		// sólo configuración
			}

		} 
	} 
}