// archivo PracticaGLSL.material

// Shader de Rasterizado (Traduce la mesh a pixeles)
vertex_program SpaceVS glsl
{
	source SpaceVS.glsl
	default_params 			// Valores para las variables uniform
	{
		param_named_auto modelViewProjMat worldviewproj_matrix	
		//param_named ZF float 0.5
		param_named_auto SinTiempo sintime_0_2pi 32
	}
}

// Shader de Fusion (Suma los colores y la iluminación)
fragment_program SpaceFS glsl
{
	source SpaceFS.glsl 
	default_params 			// Valores para las variable uniform
	{
		param_named texturaL int 0 // 1º unidad de textura -> *
		param_named texturaM int 1 // 2º unidad de textura -> *
		param_named BF float 0.5
		//param_named intLuzAmb float 1.0
	}
}

material IG2App/SpaceGLSL {
	technique {
		pass {
			vertex_program_ref SpaceVS
			{ // params -> default_params
			}
			fragment_program_ref SpaceFS
			{ // params -> default_params
			}
			// Almacenes de texturas en punteros
			texture_unit { 					// * -> int 0
				texture lightMap.jpg 2d 	// archivo
				tex_address_mode clamp 		// sólo configuración
				filtering bilinear 			// de acceso al texel
			}
				texture_unit { 				// * ‐> int 1
				texture spaceSky.jpg 2d 		// archivo
				tex_address_mode wrap 		// sólo configuración
			} 								// de acceso al texel
		} 
	} 
}

////////////////////////////////////////////////////////////////////
///Material de corrosion, añade transparencia basadoi en el factor rojo
///La textura representada NO se fusiona con la usada para la transparencia
///El color interior lo da un material

vertex_program CorrosionVS glsl
{
	source CorrosionVS.glsl
	default_params 			
	{
		
		// Para las transformaciones en espacio de coordenadas
		param_named_auto modelViewMat worldview_matrix
		param_named_auto modelViewProjMat worldviewproj_matrix	
		param_named_auto normalMat inverse_transpose_worldview_matrix
		//param_named_auto normalMat transpose_inverse_worldview_matrix
		//existe tb la transpuesta de la inversa
	}
}

fragment_program CorrosionFS glsl
{
	source CorrosionFS.glsl 
	default_params 			
	{
		// -1 o 1
		param_named_auto Flipping render_target_flipping 
		param_named texturaCorrosion int 0
		param_named texturaBumpy int 1

		
		param_named materialDiffuse float3 1.0 1.0 1.0 

		param_named_auto lightPosition light_position_view_space 0
        param_named_auto lightDiffuse light_diffuse_colour 0
		//param_named_auto lightAmbient light_ambient_colour 0
		// Colores de las caras
		param_named vBackColor float4 0.5 0.5 0.5 1
		param_named vFrontColor float4 0.0 0.5 0.5 1
	}
}

material IG2App/CorrosionGLSL {
	technique {
		pass {
			// Activa o desactiva la vision por el anverso
			cull_hardware none
			cull_software none
			
			vertex_program_ref CorrosionVS
			{ // params -> default_params
			}
			fragment_program_ref CorrosionFS
			{ // params -> default_params
			}

			texture_unit { 					
				// * -> int 0
				texture corrosion.jpg 2d 	
				tex_address_mode clamp 		
				filtering bilinear 			
			}
			texture_unit { 					
				// * -> int 1
				texture BumpyMetal.jpg 2d 	
				tex_address_mode wrap 
			}

		} 
	} 
}

////////////////////////////////////////////////////////////////////
///Material de Blanco/Negro

vertex_program RenderQuadVS glsl
{
   source Ejemplo2VS.glsl
   default_params 
    {
        param_named_auto modelViewProjMat worldviewproj_matrix
    }
}
fragment_program LuminancePS glsl 
//este es el fragment
{
    source LuminancePS.glsl
    default_params {
        param_named RTT0 int 0 
        // textura con la escena
    }
}

material LuminancePS {
    technique {
        pass {
            depth_check off // desactivar el depth‐buffer
            depth_write off
            vertex_program_ref RenderQuadVS {
            }
            fragment_program_ref LuminancePS {
            }
            texture_unit RTT0
            {
                // sin imagen de archivo ‐> previous render target
                filtering none 
                // tiene la resolución del viewport
            }
        }
    } 
}

////////////////////////////////////////////////////////////////////
///Material de Blur

fragment_program Kernel3x3PS glsl 
//este es el fragment
{
    source Kernel3x3PS.glsl
    default_params {
        param_named RTT0 int 0 
        param_named kernel float9 0 0 0 0 1 0 0 0 0
        // textura con la escena
    }
}
material EdgeEmbossPS {
    technique {
        pass {
            depth_check off 
            // desactivar el depth‐buffer
            depth_write off
            vertex_program_ref RenderQuadVS {
            }
            fragment_program_ref Kernel3x3PS {
                param_named kernel float9 -4 -2 0 -2 1 2 0 2 4
            }
            texture_unit //RTT0
            {
                // sin imagen de archivo ‐> previous render target
                filtering none 
                // tiene la resolución del viewport
                tex_address_mode clamp
            }
        }
    } 
}


////////////////////////////////////////////////////////////////////
///Material Geometry Shader

vertex_program ExplotaVS glsl
{
   source ExplotaVS.glsl
   default_params 
    {
        //param_named_auto modelViewProjMat worldviewproj_matrix
    }
}

fragment_program ExplotaFS glsl 
//este es el fragment
{
    source ExplotaFS.glsl
    default_params {
    }
}

geometry_program ExplotaGS glsl  // también para el GS
{	
	// archivo del Geometry Shader
	source ExplotaGS.glsl 
	// tiene que coincidir con
	input_operation_type triangles 
	// las declaraciones
	output_operation_type triangle_strip 
	// del Geometry shader
	max_output_vertices 3 

// para las uniform del shader
default_params { 
	param_named_auto modelViewProjMat worldviewproj_matrix
	} 
} 

// Orden de variables VS -> GS -> FS
material IG2App/ExplotaGS {
    technique {
        pass {
            cull_hardware none
			cull_software none
            vertex_program_ref ExplotaVS {
            }
            fragment_program_ref ExplotaFS {
            }
            geometry_program_ref ExplotaGS { } // también para el GS
        }
    } 
}